tosca_definitions_version: cloudify_dsl_1_2

########################################################

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
# - http://www.getcloudify.org/spec/vsphere-plugin/1.3.1/plugin.yaml
  - vsphere-plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml

########################################################

plugins:
    dns-plugin:
        executor: host_agent
        source: dns-plugin

########################################################
relationships:
    dns_client_uses_dns_server:
       derived_from: cloudify.relationships.connected_to
       source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
             preconfigure: dns-plugin.dns_plugin.tasks.configure_resolv_conf


########################################################
node_types:
    policy_node_type:
       derived_from: cloudify.nodes.SoftwareComponent
       properties:
          nodes_to_monitor:
             default: []
       interfaces:
          cloudify.interfaces.lifecycle:
             start:
                implementation: scripts/policy-start.sh
                executor: central_deployment_agent
             stop:
                implementation: scripts/policy-stop.sh
                executor: central_deployment_agent
########################################################

inputs:
    cloudify_agent:
        default:  'ubuntu'
        description: >
            User for connecting to application VMs

    template_name:
        description: >
            Template to clone VMs from

    management_network:
        description: >
            Which network to deploy the VM on

    external_network:
        description: >
            Which network to deploy the VM on

########################################################

node_templates:
    a_node:
        type: cloudify.nodes.Compute
        properties:
           install_agent: false

    policy_node:
        type: policy_node_type
        relationships:
           - target: bono_vm
             type: cloudify.relationships.depends_on
           - target: sprout_vm
             type: cloudify.relationships.depends_on
           - target: a_node
             type: cloudify.relationships.contained_in
        properties:
           nodes_to_monitor:
              - bono_vm
              - sprout_vm

    bono_vm:
        type: cloudify.vsphere.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 2
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True
        relationships:
           - target: homestead_vm
             type: cloudify.relationships.depends_on
        interfaces:
            cloudify.interfaces.monitoring_agent:
               install:
                  implementation: diamond.diamond_agent.tasks.install
                  inputs:
                     diamond_config:
                        interval: 5
               start: diamond.diamond_agent.tasks.start
               stop: diamond.diamond_agent.tasks.stop
               uninstall: diamond.diamond_agent.tasks.uninstall

            cloudify.interfaces.monitoring:
               start:
                  implementation: diamond.diamond_agent.tasks.add_collectors
                  inputs:
                     collectors_config:
                           CPUCollector: {}

    ellis_vm:
        type: cloudify.vsphere.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 1
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True
        relationships:
            - target: bono_vm
              type: cloudify.relationships.depends_on

    sprout_vm:
        type: cloudify.vsphere.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 2
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True
        relationships:
           - target: homer_vm
             type: cloudify.relationships.depends_on
           - target: homestead_vm
             type: cloudify.relationships.depends_on

        interfaces:
            cloudify.interfaces.monitoring_agent:
               install:
                  implementation: diamond.diamond_agent.tasks.install
                  inputs:
                     diamond_config:
                        interval: 5
               start: diamond.diamond_agent.tasks.start
               stop: diamond.diamond_agent.tasks.stop
               uninstall: diamond.diamond_agent.tasks.uninstall

            cloudify.interfaces.monitoring:
               start:
                  implementation: diamond.diamond_agent.tasks.add_collectors
                  inputs:
                     collectors_config:
                           CPUCollector: {}
    homer_vm:
        type: cloudify.vsphere.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 2
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True

    homestead_vm:
        type: cloudify.vsphere.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 2
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True


    ralf_vm:
        type: cloudify.vsphere.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 2
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True

    dns_vm:
        type: cloudify.vsphere.nodes.Server
        relationships:
            - target: bono_vm
              type: cloudify.relationships.depends_on
            - target: ellis_vm
              type: cloudify.relationships.depends_on
            - target: sprout_vm
              type: cloudify.relationships.depends_on
            - target: homer_vm
              type: cloudify.relationships.depends_on
            - target: homestead_vm
              type: cloudify.relationships.depends_on
            - target: ralf_vm
              type: cloudify.relationships.depends_on

        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                template: { get_input: template_name }
                cpus: 1
                memory: 2048
            networking:
                connect_networks:
                    - name: { get_input: management_network }
                      switch_distributed: True
                      management: True
                    - name: { get_input: external_network }
                      switch_distributed: True
                      external: True

########################################################
    bono_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/bono.sh
                 inputs:
                    public_ip: { get_attribute: [ bono_vm, public_ip ] }
                    dns_ip: { get_attribute: [ dns_vm, ip ]  }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: bono_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    ellis_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/ellis.sh
                 inputs:
                    public_ip: { get_attribute: [ellis_vm, public_ip] }
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: ellis_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    ralf_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/ralf.sh
                 inputs:
                    dns_ip: { get_attribute: [ dns_vm, ip ] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: ralf_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    homestead_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/homestead.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: homestead_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    homer_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/homer.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: homer_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    sprout_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/sprout.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: sprout_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    dns_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/dns.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: dns_vm

########################################################

    dns_app_config:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/dns-config.sh
                 inputs:
                    process:
                       command_prefix: /usr/bin/sudo
        relationships:
                -  type: cloudify.relationships.contained_in
                   target: dns_vm
                -  type: cloudify.relationships.connected_to
                   target: dns_app
                -  type: cloudify.relationships.connected_to
                   target: bono_app
                -  type: cloudify.relationships.connected_to
                   target: ellis_app
                -  type: cloudify.relationships.connected_to
                   target: ralf_app
                -  type: cloudify.relationships.connected_to
                   target: sprout_app
                -  type: cloudify.relationships.connected_to
                   target: homer_app
                -  type: cloudify.relationships.connected_to
                   target: homestead_app

outputs:
  web:
    description: Web application endpoint
    value:
      ip_ellis: { get_attribute: [ ellis_vm, public_ip ] }
      ip_bono: { get_attribute: [ bono_vm, public_ip ] }
      signup_code: secret
